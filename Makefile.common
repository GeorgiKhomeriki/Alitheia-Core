# This is a GNU Makefile.

# This Makefile is part of the Alitheia system produced by the SQO-OSS
# consortium and is covered by the same LICENSE as the rest of the system:
# the 2-Clause FreeBSD license which you may find in the LICENSE file.

# This Makefile contains common definitions for top-level Makefiles (e.g.
# the Alitheia core, the metrics collection, and others). It is not intended
# to be used as a stand-alone Makefile.
#
# This makefile should be included *after* your default target has been
# defined (e.g. all) or you need to use a .DEFAULT setting in your makefile.
#
# Targets which are defined:
#
# check		- check the subdirectories and BUNDLES against each other
#		  in order to flag mismatches.
#
# Templates which are defined:
#
# subdir_template <type> <subdir> <target>
#		- define target <type>-<subdir> to cd into <subdir>
#		  and call a sub-make with <target>. Usually <type>
#		  and <target> will be the same.
# build_classpath <result> <jars> <path>
#		- set variable result to a claspath based on the list
#		  of jars in variable jars which live in variable path.
#
# Variables which are defined:
#
# ABS_PREFIX	- absolute path to the PREFIX
# JAVA_LINT	- lint parameters shared across Alitheia

ABS_PREFIX?=$(shell cd $(PREFIX) && pwd)
JAVA_LINT?=-Xlint

# Template to pass targets on to sub-directories.
define subdir_template
$(1)-$(2) :
	@echo "# Entering" `cd $(2) && pwd | sed 's+$(TOP_SRCDIR)/*++'` "($(3))"
	@cd $(2) && $(MAKE) $(3) TOP_SRCDIR=$(TOP_SRCDIR) PREFIX=$(ABS_PREFIX) WITH_MAVEN=$(WITH_MAVEN)
endef

# This macro constructs a classpath out of a list of jar names,
# a path where those jars live and a variable name to put the
# resulting classpath. Usage:
#
# build_classpath <result> <jars> <path>
#
# all three the parameters are *variable names*, not actual values.
#
# typically you call this as follows:
#
# $(eval $(call build_classpath,CLASSPATH,EXT_LIBS,EXT_PATH))
#
# and you get the classpath version of $(EXT_LIBS) with $(EXT_PATH)
# prepended to each stored in $(CLASSPATH). Windows is handled as
# well, yielding a semicolon-separated list instead of colons.
# The result variable is appended to, not reset.
#
define build_classpath
$$(foreach d,$$($(2)),$$(eval $(1):=$$($(1))$$($(3))/$$(strip $$(d)):))
ifeq ($$(OS),Windows_NT)
$(1):=$$(subst :,;,$$(subst /,\,$$($(1))))
endif
endef



# This is a double check that all of the subdirectories listed in 
# BUNDLES exist and that all of the subdirectories that exist are
# listed in BUNDLES. This helps avoid embarrassing mismatches between
# the Maven, Makefile and filesystem setups.
check:
	@SUBDIRS=`find . -maxdepth 1 -type d -name '[a-zA-Z0-9]*' | sed 's+./++' ` ; \
	UNUSED=`for i in $$SUBDIRS $(BUNDLES) ; do echo $$i ; done | sort | uniq -u` ; \
	test -z "$$UNUSED" || { echo "# Unused subdirs: $$UNUSED" ; }

