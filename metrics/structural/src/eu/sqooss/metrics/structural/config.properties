#Expected format for each language is:
# .method.regexp = a valid regular expression
# .operators = a list of space separated keywords

#Space separated list of supported languages. 
languages=c java cpp

c.method.regexp=(\\w+\\s*\\*?)\\s+(\\w+)\\s*\\(.*\\)\\s*\\{
c.operators=struct union auto static extern register typedef if else while do for switch case default break continue return goto case \! \!\= \% \%\= \& \&\& \|\| \&\= \( \) \{ \} \[ \] \* \+ \+\+ \+\= \, \- \-\- \-\= \. \.\.\. \/ \/\= \< \<\< \<\<\= \<\= \= \=\= \> \>\= \>\> \>\>\= \? \^ \^\= \| \|\= \; \=\& \" \'

java.method.regexp=(public|protected|private|static|\\s) +[\\w\\<\\>\\[\\]]+\\s+\\w+ *\\([^\\)]*\\)? *(\\{?|[^;])
java.operators=abstract break case catch class const continue default do else extends false final finally for goto assert if implements import instanceof interface native new null package private protected public return static strictfp super switch synchronized this throw throws transient true try volatile while \! \!\= \% \%\= \& \&\& \|\| \&\= \( \) \{ \} \[ \] \* \+ \+\+ \+\= \, \- \-\- \-\= \. \.\.\. \/ \/\= \< \<\< \<\<\= \<\= \= \=\= \> \>\= \>\> \>\>\= \? \^ \^\= \| \|\= \; \=\& \" \'

cpp.method.regexp=afasdkw
cpp.operators=auto extern inline register static typedef virtual mutable const friend volatile asm break case class continue default delete do else enum for goto if new operator private protected public return sizeof struct switch this union while namespace using try catch throw const_cast static_cast dynamic_cast reinterpret_cast typeid template explicit true false typename \! \!\= \% \%\= \& \&\& \|\| \&\= \( \) \* \*\= \+ \+\+ \+\= \, \- \-\- \-\= \-\> \. \.\.\. \/ \/\= \: \:\: \< \<\< \<\<\= \<\= \= \=\= \> \>\= \>\> \>\>\= \? \[ \] \^ \^\= \{ \} \| \|\= \~
