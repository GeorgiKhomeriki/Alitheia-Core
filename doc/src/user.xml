<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="user">
<title>User Manual</title>
<sect1 id="user:interfaces">
    <title>Interfaces</title>
    <para>
    The Alitheia system is built with independence from user interfaces in mind, so it
    can have any kind of user interface on top of it. Currently, two user
    interfaces, each with a different purpose are existing for Alitheia -- the WebUI, a
    user interface running in a webbrowser and therefore being very easily accessible,
    and the Eclipse plug-in, an add-on for the Eclipse IDE that integrates quality
    measurements seamlessly into a development environment. The user interfaces
    exchange data with the Alitheia core through a well-defined web service interface.
    </para>
    <sect2  id="user:interfaces:web" >
        <title>Web</title>
        <para>
        The WebUI runs on top of the Tomcat application server. It is implemented
        as a set of Java beans and JSP (Java Server Pages) that display projects
        that have been evaluated by the Alitheia system and their results.
        </para>
        <para>
        The SQO-OSS HTML-based user interface's (WebUI) main purpose is to serve as a
        portal for accessing the publicly available quality evaluation information provided
        from an attached SQO-OSS framework. It is expected to be the most often used user
        interface for SQO-OSS, with project developers as a primary audience. Although, the
        WebUI is designed in such a way, so it can be equally usefull to other users, which
        are interested in observing the quality of their favourite Open Source projects.
        </para>
        <para>
        The WebUI interface for SQO-OSS is distributed in a web-application form and is
        packaged as a WAR file deployable in Apache Tomcat environment. This component
        follows the trend in the web-application development and is therefore implemented
        as a JSP application.
        The end-user functionality provided from the WebUI is split between several major views:
        <itemizedlist spacing='compact'>
            <listitem><para>Main view</para></listitem>
            <listitem><para>Projects view</para></listitem>
            <listitem><para>Metrics view</para></listitem>
            <listitem><para>Files view</para></listitem>
            <listitem><para>Account view</para></listitem>
        </itemizedlist>
        The Main view serves as an entry point for accessing all other views. In addition
        it displays common information distributed from the attached SQO-OSS framework
        like news events, recently evaluated projects and new metrics. Prior user login, the
        WebUI communicates with the SQO-OSS framework using a pre-defined account
        with limited rights, thus allowing login and user registration, but no access to project
        or evaluation information.
        The Projects view provides information about project that has been evaluated
        from the SQO-OSS framework. In addition it lets the user select projects and project
        versions for closer examination of their quality-related aspects.
        </para>
        <para>
        Information about all metrics available in the underlying SQO-OSS framework
        can be received from the Metrics view. After a project selection is performed, this
        view will let the user to select a set of metrics for each of the selected projects from
        a list of metrics that has been evaluated on this project (and project's revision).
        The Files displays the file resources contained in each of the selected projects
        up to the selected project revision. In addition, using this view, the user can narrow
        the set of files, for which he wants to receive quality evaluation results.
        The Account view provides the usual login and logout interfaces, as well as inter-
        face for user registration and simple account modification.
        Each of the views is served in a separate Java Server Page (JSP) page and the
        logic handled from a corresponding Java class. Interaction with the SCL library is
        isolated into a separate Java class, for simplifying the classes that implement the
        logic of the user accessible views.
        </para>
    </sect2>
    <sect2  id="user:interfaces:eclipse">
        <title>Eclipse</title>
        <para>
        The main goal of the Eclipse IDE plug-in is to help developers keep track of the
        quality of projects, that they develop in an Eclipse programming environment. The
        plug-in provides easy access to quality evaluation results, calculated on the fly from
        the underlying SQO-OSS framework.
        </para>
        <para>
        The Eclipse IDE plug-in is distributed in form of standard application plug-in. For
        activating it, the user has to copy the plug-in into the Eclipse plug-ins tree and
        restart Eclipse, if it is already running. In the recent version of the Eclipse IDE (since
        v.3.4M6) the user can also install the plug-in from the Software Updates menu.
        </para>
        <para>
        The plug-in functionality is available per project scope and accessible via exten-
        sion to the Properties context menu (Alt+Enter). The above mentioned menu
        extension is enabled for any component of the project, but the plug-in itself is active
        only for a limited set of project resources. The list of resources allows only entities
        that can be potentially evaluated by a SQO-OSS framework and includes:
        <itemizedlist spacing='compact'>
            <listitem><para>source file -- as data entity, capable for quality evaluation</para></listitem>
            <listitem><para>source folder -- as a resource group</para></listitem>
            <listitem><para>the project -- as a global entity</para></listitem>
        </itemizedlist>
        The user accessible functionality of the Eclipse IDE plug-in is split into three
        different views available in the menu extension's tree:
        <itemizedlist spacing='compact'>
            <listitem><para>configuration view node</para></listitem>
            <listitem><para>profile view node</para></listitem>
            <listitem><para>quality view node.</para></listitem>
        </itemizedlist>
        </para>
        <para>
        The configuration view node is shared between all project's resources. Its main
        purpose is to let the user enter, validate and save the settings required for estab-
        lishing a connection with the selected SQO-OSS framework. This view also handles
        invalid connection settings and can notify the user in case of unavailable framework.
        In the last case, the specified connection settings can be stored and validated later
        on, when a connection can be established. Both other views will be disabled until a
        successful connection to a SQO-OSS framework is established.
        </para>
        <para>
        The profile view node allows the user to create, modify or remove evaluation
        profiles. An evaluation profile encapsulates a group of projects resources (mostly
        source files in a selected source tree or subtree), allows resource filtering (e.g. per
        implementation language) and where applicable can trigger an evaluation event from
        the SQO-OSS framework.
        </para>
        <para>
        The quality view node contains the actual metric evaluation results. Its main
        purpose is to retrieve evaluation information from the attached SQO-OSS framework
        depending on the selected resource and metric, and then display the evaluation
        results in a proper way. In addition, this view allows comparison with a previous
        version of the selected resource.
        </para>
    </sect2>
</sect1>
<sect1 id="user:plugins">
    <title>Plug-ins and Measurements</title>
    <para>


 _____ ___  ____   ___
|_   _/ _ \|  _ \ / _ \
  | || | | | | | | | | |
  | || |_| | |_| | |_| |
  |_| \___/|____/ \___/


    </para>
    <sect2 id="user:plugins:wc">
        <title>WC plug-in</title>
        <para></para>
    </sect2>
    <sect2 id="user:plugins:contrib">
        <title>Contributing plug-ins</title>
        <para></para>
    </sect2>
</sect1>
</chapter>
