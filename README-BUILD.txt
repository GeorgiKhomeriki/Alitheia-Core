***
*** README-BUILD
***

This README explains how the build system can be used to compile
a complete Alitheia system and the rationale behind its construction.
All of the build targets are named; much documentation is in the
build system files themselves.

* Build
* Build with Make
* Build with Maven
* Build with Netbeans
* Build with Eclipse

***
*** Build 
*** 

The build system for Alitheia is Maven. However, a mixed-language project
like Alitheia (with Java and C++ components) which also has peculiar
installation requirements (dump all jars into a PREFIX out of which the
OSGi system runs) is not easy to realise in pure Maven. Not without
pulling off a lot of deep Maven tricks, anyway.

Therefore, the build system for Alitheia is a two-stage affair:

- Make handles the weird stuff
- Make invokes Maven for building the Java parts

You will find Makefiles and POM files in most of the source directories.
Often the Makefiles have nothing but a build target that invokes Maven;
this accommodates UNIX dinosaurs who like to run 'make' from the command
line and watch what happens.

The design goals for the build system as a whole are:

- Use Maven for as much as possible
- Have 'make' do something sensible (by invoking Maven) everywhere
  where there is something sensible to do.

As a consequence, there are no Makefiles down in the actual Java sources,
but only at the level of whole bundles.

You must run the make-based build system at least once to initialise
all the Maven bits properly. See the 'Build with Make' section; you
will probably need to run

make clean build install

just once.

***
*** Build with Make
***

The make-based build is the one used to compile *and deploy* the Alitheia
Code Platform and the UI for it. You will need to use the make-based
build system at least once for deployment purposes.

The configuration for the make-based build is kept in two files at
the top of the source tree: Makefile.config and Makefile.config.local.
The .local file is intended to store the local overrides to the
default configuration which is stored and documented in Makefile.config.

The two most common changes to the make-based build system will be:

PREFIX    - Where the system will be installed.
MAVEN_CMD - The command to run Maven (often just 'mvn').

You can set these in the Makefile.config.local file as follows (the
settings here would be appropriate to a FreeBSD system):

PREFIX=/usr/local/www/data/alitheia
MAVEN_CMD=/usr/local/bin/mvn

On Windows, you can use cygwin or just MSYS to get a sh command interpreter
with the basic tools. Note that the version of GNU make shipped with MSYS
might be too old (you need GNU make version 3.81 or higher), so you 
will need to download and install the newer version manually (it's
available from the MSYS website as a separate package). Then you need to
adjust the style of paths returned by pwd, to return windows-style paths
instead of UNIX-style paths, since maven expects windows paths when
locating and installing plugins. You can do so by adding the
following line to your Makefile.config.local :

PWD_CMD=pwd -W

For Maven on Windows, just download the binary package from the Maven
website and follow the windows installation instructions on the same page.
It's recommended to add the Maven bin dir to the PATH env var in windows
then just set MAVEN_CMD=mvn in Makefile.config.local

The first time you compile the Alitheia sources, you should use
the make-based build system to build and install the system (just once)
to the default location. Remove any setting of PREFIX from the
Makefile.config.local file and run the following:

make clean build install


***
*** Build with Make - top-level targets
***

All of the top-level targets are documented in the top-level Makefile.
The standard targets (all, build, install, clean) do their normal
job and will produce a system in $(PREFIX). There are a number
of other top-level targets related to *running* the system:

start-core
start-core-bg
start-core-debug
start-core-monitor
	All of these targets will run the Alitheia Core Platform (an OSGi
	system) on the local machine. Except for start-core-bg, these will
	leave an OSGi console running so that you can control the system.
	Type 'close' to quit the console and stop the Alitheia Platform.

show-log
	Display the system log generated by the Alitheia system.

***
*** Build with Make - intermediate targets
***

Intermediate levels of the source tree have targets 'build', 'install' and
'clean'

