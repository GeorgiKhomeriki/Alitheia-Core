package eu.sqooss.impl.service.alitheia;


/**
* eu/sqooss/impl/service/alitheia/MetricPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Alitheia.idl
* den 20 december 2007 kl 13:07 CET
*/

public abstract class MetricPOA extends org.omg.PortableServer.Servant
 implements eu.sqooss.impl.service.alitheia.MetricOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getAuthor", new java.lang.Integer (0));
    _methods.put ("getDescription", new java.lang.Integer (1));
    _methods.put ("getName", new java.lang.Integer (2));
    _methods.put ("getVersion", new java.lang.Integer (3));
    _methods.put ("getResult", new java.lang.Integer (4));
    _methods.put ("getDateInstalled", new java.lang.Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  // Get information about the metric author
       case 0:  // alitheia/Metric/getAuthor
       {
         String $result = null;
         $result = this.getAuthor ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  // Get a free text description of what this metric calculates
       case 1:  // alitheia/Metric/getDescription
       {
         String $result = null;
         $result = this.getDescription ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  // Get the metric name
       case 2:  // alitheia/Metric/getName
       {
         String $result = null;
         $result = this.getName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  // Get the metric version. Free from text.
       case 3:  // alitheia/Metric/getVersion
       {
         String $result = null;
         $result = this.getVersion ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /* Generic run plug-in method
       * Returns a XML-serialized MetricResult */
       case 4:  // alitheia/Metric/getResult
       {
         String $result = null;
         $result = this.getResult ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  // Get the date this version of the metric has been installed
       case 5:  // alitheia/Metric/getDateInstalled
       {
         String $result = null;
         $result = this.getDateInstalled ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:alitheia/Metric:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Metric _this() 
  {
    return MetricHelper.narrow(
    super._this_object());
  }

  public Metric _this(org.omg.CORBA.ORB orb) 
  {
    return MetricHelper.narrow(
    super._this_object(orb));
  }


} // class MetricPOA
