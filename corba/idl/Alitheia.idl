//Alitheia.idl
module eu 
{
module sqooss
{
module impl
{
module service
{
module corba
{
module alitheia
{
  struct Directory
  {
    long id;
    string path;
  };

  struct StoredProject
  {
    long id;
    string name;
    string website;
    string contact;
    string repository;
    string mail;
  };

  struct Developer
  {
    long id;
    string name;
    string email;
    string username;
    StoredProject project;
  };

  struct ProjectVersion
  {
    long id;
    StoredProject project;
    string version;
    long timeStamp;
    Developer committer;
    string commitMsg;
    string properties;
  };

  struct BugResolution
  {
    long id;
  };

  struct BugPriority
  {
    long id;
  };

  struct BugSeverity
  {
    long id;
  };
 
  struct Bug
  {
    long id;
    StoredProject project;
    long updateRun;
    string bugId;
    long creationTS;
    long deltaTS;
    Developer reporter;
    BugResolution resolution;
    BugPriority priority;
    BugSeverity severity;
    string shortDesc;
  };

  struct ProjectFile
  {
    long id;
    string name;
    ProjectVersion version;
    string status;
    boolean isDirectory;
    Directory dir;
  };

  struct FileGroup
  {
    long id;
    string name;
    string subPath;
    string regex;
    long recalcFreq;
    string lastUsed;
    ProjectVersion version;
  };

  enum MetricTypeType
  {
    SourceCode,
    MailingList,
    BugDatabase,
    ProjectWide
  };

  struct MetricType
  {
    long id;
    MetricTypeType type;
  };

  struct Plugin
  {
    long id;
    string name;
    string installdate;
  };

  struct PluginConfiguration
  {
    long id;
    string name;
    string value;
    string type;
    string msg;
    Plugin metricPlugin;
  };

  struct Metric
  {
    long id;
    Plugin metricPlugin;
    MetricType type;
    string mnemonic;
    string description;
  };

  struct ProjectFileMeasurement
  {
    long id;
    Metric measureMetric;
    ProjectFile file;
    string result;
  };

  struct ProjectVersionMeasurement
  {
    long id;
    Metric measureMetric;
    ProjectVersion version;
    string result;
  };

  typedef sequence<ProjectFile> ProjectFileList;
  typedef sequence<ProjectVersion> ProjectVersionList;
  typedef sequence<Metric> MetricList;

  struct ResultEntry
  {
    string value;
    string mimeType;
    string mnemonic;
  };
  
  typedef sequence<ResultEntry> Result;

  struct Checkout
  {
    ProjectVersion version;
    ProjectFileList files;
  };

  interface Core
  {
    // returns an unique id which can be used as part of the name of
    // objects exported into the orb to avoid name clashes.
    long getUniqueId();
    // registers a metric accesible by 'name' in the ORB at the core
    // returns an id which can be used to unregister the metric again
    long registerMetric( in string name );
    // unregisters a metric previously registered
    void unregisterMetric( in long id );

    // Add a supported metric description to the database
    // See eu.sqooss.service.abstractmetric.AbstractMetric.addSupportedMetrics
    boolean addSupportedMetrics( in string metricname, 
                                 in string description, 
                                 in string mnemonic, 
                                 in MetricTypeType type );
    MetricList getSupportedMetrics( in string metricname );
    
    ProjectFileList getVersionFiles( in ProjectVersion version );
  };

  interface Scheduler
  {
    // enqueues the job which is registered in ORB with
    // name
    void enqueueJob( in string name );

    // starts job execution using \a n additional worker
    // threads
    void startExecute( in long n );
    // stops job execution of all current worker threads
    void stopExecute();
    // returns, wheter the scheduler ist currently executing
    boolean isExecuting();

    // registers a job in the corba plugin having the name \a name
    long registerJob( in string name );
    void unregisterJob( in string name );
    // adds the job \a dependency as dependency of \a job
    void addJobDependency( in string job, in string dependency );
    // waits for the job with /a name to finish
    void waitForJobFinished( in string name );
  };

  typedef sequence<octet> bytes;

  interface FDS
  {
    // puts the contents of \a file into \a contents
    // returns the length of the file
    bytes getFileContents( in ProjectFile file );

    // puts the contents of \a file into \a contents
    // returns the length of the file
    bytes getFileContentParts( in ProjectFile file, in long begin, in long length );

    // creates a checkout of all files of the current \a version
    Checkout getCheckout( in ProjectVersion version, in string pattern );
  };

  struct map_entry
  {
    string key;
    any value;
  };
  typedef sequence<map_entry> map;
  typedef sequence<any> list;

  interface Database
  {
    // adds a record to the database
    boolean addRecord( inout any record );
    // updates a record in the database
    boolean updateRecord( inout any record );
    // deletes a record from the database
    boolean deleteRecord( in any record );
    // finds an object by its id
    any findObjectById( in any type, in long id );
    // finds objects by properties
    list findObjectsByProperties( in any type, in map properties );
    // executes a SQL query on the database
    // for parameters, see eu.sqooss.service.db.DbService.doSQL
    list doSQL( in string sql, in map params );
    // executes a Hiberante HQL query on the database
    // for parameters, see eu.sqooss.service.db.DbService.doQL
    list doHQL( in string hql, in map params );
  };

  // job is to be exported by programs using the CORBA plugin
  interface Job
  {
    // returns the priority of the job
    // lower number means higher priority, 0 being the highest
    long priority();
    // runs the job
    void run();
    enum JobState
    {
        Created,
        Queued,
        Running,
        Finished,
        Error
    };
    // called by the scheduler as soon as the job's state
    // is changing
    oneway void setState( in JobState state );
  };

  interface Logger
  {
    // prints the debug message text to logger
    void debug( in string logger, in string text );
    // prints the info message text to logger
    void info( in string logger, in string text );
    // prints the warn message text to logger
    void warn( in string logger, in string text );
    // prints the error message text to logger
    void error( in string logger, in string text );
  };

  // AbstractMetric (or: derivates of it) is to be exported
  // by programs using the CORBA plugin
  interface AbstractMetric
  {
    // install the metric in the database
    boolean doInstall();
    // remove the metric from the database
    boolean doRemove();
    // updates the metric entry in the database
    boolean doUpdate();
    // Get information about the metric author
    string getAuthor();
    // Get a free text description of what this metric calculates
    string getDescription();
    // Get the metric name
    string getName();
    // Get the metric version. Free form text.
    string getVersion();
  };

  interface ProjectVersionMetric : AbstractMetric
  {
    // returns the metric's result for ProjectVersion version
    Result doGetResult( in ProjectVersion version, in Metric m );
    // runs the metric on ProjectVersion v
    void doRun( in ProjectVersion v );
  };
  interface StoredProjectMetric : AbstractMetric
  {
    // returns the metric's result for StoredProject project
    Result doGetResult( in StoredProject project, in Metric m );
    // runs the metric on StoredProject p
    void doRun( in StoredProject p );
  };
  interface ProjectFileMetric : AbstractMetric
  {
    // returns the metric's result for ProjectFile file
    Result doGetResult( in ProjectFile file, in Metric m );
    // runs the metric on ProjectFile f
    void doRun( in ProjectFile f );
  };
  interface FileGroupMetric : AbstractMetric
  {
    // returns the metric's result for FileGroup group
    Result doGetResult( in FileGroup group, in Metric m );
    // runs the metric on FileGroup g
    void doRun( in FileGroup g );
  };
};
};
};
};
};
};
