//Alitheia.idl
module alitheia
{
  struct ProjectVersion;
  struct ProjectFile;
  typedef sequence<ProjectFile> ProjectFileList;
  typedef sequence<ProjectVersion> ProjectVersionList;

  struct StoredProject
  {
    long id;
    string name;
    string website;
    string contact;
    string bugs;
    string repository;
    string mail;
  };

  struct ProjectVersion
  {
    long id;
    StoredProject project;
    long version;
    long timeStamp;
  };

  struct ProjectFile
  {
    long id;
    string name;
    ProjectVersion projectVersion;
    string status;
  };

  struct Tag
  {
    ProjectVersion projectVersion;
    string name;
  };

  struct FileGroup
  {
    long id;
    string name;
    string subPath;
    string regex;
    long recalcFreq;
    string lastUsed;
    ProjectVersion projectVersion;
  };

  enum MetricTypeType
  {
    SourceCode,
    MailingList,
    BugDatabase
  };

  struct MetricType
  {
    long id;
    MetricTypeType type;
  };

  struct Plugin
  {
    long id;
    string name;
    string installdate;
  };

  struct Metric
  {
    long id;
    Plugin plugin;
    MetricType metricType;
    string description;
  };

  struct ProjectFileMeasurement
  {
    long id;
    Metric metric;
    ProjectFile projectFile;
    string whenRun;
    string result;
  };

  interface Core
  {
    // registers a metric accesible by 'name' in the ORB at the core
    // returns an id which can be used to unregister the metric again
    long registerMetric( in string name );
    // unregisters a metric previously registered
    void unregisterMetric( in long id );

    long registerJob( in string name );
    void enqueueJob( in string name );
    void unregisterJob( in long id );
    void addJobDependency( in string job, in string dependency );
    void waitForJobFinished( in string name );

    // puts the contents of \a file into \a contents
    // returns the length of the file
    long getFileContents( in ProjectFile file, out string contents );
  };

  interface Database
  {
    boolean addRecord( in any record );
  };

  interface Job
  {
    long priority();
    void run();
    enum JobState
    {
        Created,
        Queued,
        Running,
        Finished,
        Error
    };
    void setState( in JobState state );
  };

  interface Logger
  {
    // prints the debug message text to logger
    void debug( in string logger, in string text );
    // prints the info message text to logger
    void info( in string logger, in string text );
    // prints the warn message text to logger
    void warn( in string logger, in string text );
    // prints the error message text to logger
    void error( in string logger, in string text );
  };


  interface AbstractMetric
  {
    // Get information about the metric author
    string getAuthor();
    // Get a free text description of what this metric calculates
    string getDescription();
    // Get the metric name
    string getName();
    // Get the metric version. Free form text.
    string getVersion();
  };

  interface ProjectVersionMetric : AbstractMetric
  {
    /* Generic run plug-in method
     * Returns a XML-serialized MetricResult */
    string getResult( in ProjectVersion projectVersion );

    void run( in ProjectVersion v );
    boolean run2nd( in ProjectVersion a, in ProjectVersion b );
  };
  interface StoredProjectMetric : AbstractMetric
  {
    /* Generic run plug-in method
     * Returns a XML-serialized MetricResult */
    string getResult( in StoredProject storedProject );

    void run( in StoredProject p );
  };
  interface ProjectFileMetric : AbstractMetric
  {
    /* Generic run plug-in method
     * Returns a XML-serialized MetricResult */
    string getResult( in ProjectFile projectFile );

    void run( in ProjectFile f );
  };
  interface FileGroupMetric : AbstractMetric
  {
    /* Generic run plug-in method
     * Returns a XML-serialized MetricResult */
    string getResult( in FileGroup fileGroup );

    void run( in FileGroup g );
  };
};
